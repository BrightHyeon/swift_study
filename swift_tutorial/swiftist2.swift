//2일차.
// 값 타입(value type)과 참조 타입(reference type).
<클래스>
// 전통적인 관점에서의 클래스
// 단일상속
// (인스턴스/타입) 메서드
// (인스턴스/타입) 프로퍼티
// 참조타입
// Apple 프레임워크의 대부분의 큰 뼈대는 모두 클래스로 구성

<구조체>
// // 다른 언어의 구조체보다 다양한 기능.
// 상속 불가
// // (인스턴스/타입) 메서드
// // (인스턴스/타입) 프로퍼티
// 값 타입
// Swift의 대부분의 큰 뼈대는 모두 구조체로 구성

<열거형>
// 다른 언어의 열거형과는 많이 다른 존재
// 상속 불가
// // (인스턴스/타입) 메서드
// // (인스턴스/타입) 연산 프로퍼티
// 값 타입
// // 유사한 종류의 여러 값을 유의미한 이름으로 한 곳에 모아 정의
// 열거형 자체가 하나의 데이터 타입. 열거형의 case 하나하나 전부 하나의 유의미한 값으로 취급

struct Abc {
    var a : String = "Property"
}

let b : Abc = Abc()

func aa(_ bb: Abc) {
    var cc: Abc = bb //bb.a로 바로 못하는 이유 : 함수매개변수의 경우 자동으로 let선언 되있는 상태. 값 바꿀 수 없다.
    cc.a = "ABC"
}

aa(b)
print(b.a)


// class의 경우 값이 바뀌고, struct는 안 바뀜. 
class Abc {
    var a : String = "Property"
}

let b : Abc = Abc()

func aa(_ bb: Abc) {
    let cc: Abc = bb //
    cc.a = "ABC"
}

aa(b)
print(b.a)
/////////////////////////나나나나나나나나ㅏ나나나나나나나ㅏ난난젲제제제ㅔ제제제제제젲제제제제제제주도///////////////////////////////////////////

